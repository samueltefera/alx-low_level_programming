	;;  101-hello_holberton.asm   print an integer from storage and from a register
	;;  Assemble:	nasm -f elf64 -l 101-hello_holberton.lst  101-hello_holberton.asm
	;;  Link:		gcc -o 101-hello_holberton  101-hello_holberton.o
	;;  Run:		./101-hello_holberton
	;;  Output:	a=5, rax=7

	;;  Equivalent C code
	;;  // hello.c
	;;  #include <stdio.h>
	;;  int main()
	;;  {
	;;    char msg[] = "Hello, Holberton\n";
	;;    printf("%s\n",msg);
	;;    return 0;
	;;  }

	;;  Declare external function
	        extern	printf	; the C function, to be called

	        SECTION .data	; Data section, initialized variables

a:		dq	5	; long int a=5;
fmt:	    db "Hello, Holberton\n", 17, 0 ; The printf format, "\n"


	        SECTION .text	; Code section.

	        global main	; the standard gcc entry point
main:				; the program label for the entry point
	        push    rbp	; set up stack frame

	mov	rax,[a]		; put "a" from store into register
	add	rax,2		; a+2  add constant 2
	mov	rdi,fmt		; format for printf
	mov	rsi,[a]         ; first parameter for printf
	mov	rdx,rax         ; second parameter for printf
	mov	rax,0		; no xmm registers
	        call    printf	; Call C function

	pop	rbp		; restore stack

	mov	rax,0		; normal, no error, return value
	ret			; return
